[
  // NW.js
  {
    "title": "NW.js",
    "url": "https://nwjs.io",
    "logo": "nw.png",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Node.js"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Very wide OS support (about twice as many OS's as Electron)",
      "Legacy OS support to OSX 10.6 and XP (via NW.js 0.14.7 LTS)",
      "Actually cares about proper Linux support",
      "Allows for protected source code (important for proprietary/closed source code)",
      "Backed by Intel",
      "Updated within 24 hours of a Chromium or Node release",
      "Still a resource hog, but uses less RAM and disk space than Electron",
      "Distribution sizes can be as small as 20MB (Windows Installer)",
      "Been around 5 years longer than Electron/used by thousands of projects",
      "Assumes you want to create a desktop app, and not a node script with an optional UI.",
      "Super easy to get started with and a no-nonsense API",
      "Can use node_modules",
      "Has Vue, React, Etc. boilerplates available",
      "Plays nicely with Gulp, Webpack, etc.",
      "Ability to share code across Mobile/Web/Desktop if project is setup correctly"
    ],
    "cons": [
      "Terrible Name/Branding/Marketing",
      "Small-Medium ecosystem",
      "Basically one person behind most of the code",
      "Everything you need from the documentation is available, but the site is clunky"
    ],
    "frameworks": [
      {
        "framework": "Vue",
        "title": "Vue-CLI + NW.js",
        "url": "https://github.com/nwutils/nw-vue-cli-example"
      },
      {
        "framework": "Angular 8+",
        "title": "Angular CLI + NW.js",
        "url": "https://github.com/nwutils/nw-angular-cli-example"
      },
      {
        "framework": "More available at",
        "title": "NW Utils",
        "url": "https://nwutils.io"
      }
    ],
    "tools": [],
    "tutorials": [
      {
        "title": "Holy shit NW.js is so easy",
        "author": "The Jared Wilcurt",
        "url": "https://dev.to/thejaredwilcurt/holy-shit-nw-js-is-so-easy-1h6",
        "site": "dev.to"
      },
      {
        "title": "NW.js, Vue, Vuetify",
        "author": "Ackzell",
        "url": "https://www.youtube.com/playlist?list=PLmJs3lfUmCdT9MyG60Oo6HM7xAn79vwZ0",
        "site": "YouTube"
      },
      {
        "title": "Making a desktop app: For complete beginners",
        "author": "The Jared Wilcurt",
        "url": "https://gitlab.com/TheJaredWilcurt/battery-app-workshop",
        "site": "GitLab"
      },
      {
        "title": "Packaging and distributing NW.js apps",
        "author": "Wouter Hisschem√∂ller",
        "url": "https://github.com/hisschemoller/nwjs-tutorial",
        "site": "GitHub"
      },
      {
        "title": "Reducing app distribution size in NW.js",
        "author": "The Jared Wilcurt",
        "url": "https://dev.to/thejaredwilcurt/reducing-app-distribution-size-in-nwjs-3d5f",
        "site": "dev.to"
      },
      {
        "title": "Building a Desktop App with Vue: NW.js",
        "author": "Natalia Tepluhina",
        "url": "https://dev.to/vuevixens/building-a-desktop-app-with-vue-nwjs-1f9e",
        "site": "dev.to"
      },
      {
        "title": "Angular-CLI and NW.js for development",
        "author": "The Jared Wilcurt",
        "url": "https://dev.to/thejaredwilcurt/angular-cli-and-nwjs-for-development-49gl",
        "site": "dev.to"
      },
      {
        "title": "NW Utils",
        "author": "The Jared Wilcurt",
        "url": "https://nwutils.io",
        "site": "More available at"
      }
    ],
    "notableProjects": [
      {
        "title": "Construct",
        "url": "https://www.construct.net",
        "description": "Used under the hood for tens of thousands of games created using the Construct game dev toolkit."
      },
      {
        "title": "WeChat Mini Program SDK",
        "url": "https://open.wechat.com",
        "description": "WeChat Mini Program SDK is built with NW.js. Over 1 million mini programs have been created. These are basically Chinese focused mobile apps and there are about half as many of them as apps in Apple's AppStore. WeChat itself has over 1 Billion monthly active users."
      },
      {
        "title": "pgAdmin 4",
        "url": "https://www.pgadmin.org",
        "description": "A very popular database tool, pgAdmin switched to NW.js in 2021 saying \"By implementing the Desktop Runtime using NW.js we get rid of the separate server application and the independent browser. We also get rid of QT and C++ runtime logic\"."
      },
      {
        "title": "Gitter",
        "url": "https://gitter.im",
        "description": "Gitter is a chat platform for open source projects that directly integrates with GitHub. The native Windows desktop app for it uses NW.js."
      },
      {
        "title": "Game Dev Tycoon",
        "url": "https://www.greenheartgames.com/app/game-dev-tycoon",
        "description": "A popular business simulation game where you replay the history of the gaming industry by starting your own video game development company in the 80's. The game runs inside NW.js."
      },
      {
        "title": "YubiKey",
        "url": "https://www.yubico.com",
        "description": "YubiKey is a hardware authentication device manufactured by Yubico. Primarily used in corporate/enterprise settings, the desktop app used to install and configure the hardware device is built in NW.js."
      },
      {
        "title": "Scout-App",
        "url": "http://scout-app.io",
        "description": "Open source, beginner-friendly, desktop app for web developers and designers to process Sass/SCSS files to CSS."
      },
      {
        "title": "Conductor Companion App",
        "url": "https://www.conductortech.com/companion",
        "description": "A tool to help VFX artists render shots in the cloud."
      },
      {
        "title": "AlternativeTo: List of apps made with NW.js",
        "url": "https://alternativeto.net/list/3300/apps-made-with-nw-js",
        "description": "List of apps on the AlternativeTo.net website that are made with NW.js"
      },
      {
        "title": "List of apps added to NW.js wiki",
        "url": "https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js",
        "description": "User submited list of apps made with NW.js"
      }
    ],
    "notableTrailingLink": true
  },
  // Electron
  {
    "title": "Electron",
    "url": "https://electronjs.org",
    "logo": "electrom.jpg",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Node.js"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Great name/marketing/branding",
      "Big ecosystem",
      "Good documentation",
      "Used by a few big name projects",
      "Backed by GitHub",
      "Can use node_modules",
      "Has Vue, React, Etc. boilerplates available",
      "Plays nicely with Gulp, Webpack, etc.",
      "Ability to share code across Mobile/Web/Desktop if project setup correctly",
      "Offers a stable and nightly to give access to the latest Chromium/Node versions"
    ],
    "cons": [
      "Doesn't support native ESM imports",
      "Basically one person behind most of the code",
      "Doesn't take Linux support seriously",
      "Does not support any legacy OS's",
      "Resource Hog",
      "No way to protect your source code"
    ],
    "frameworks": [
      {
        "framework": "Vue (Vue-CLI 2)",
        "title": "Electron-Vue",
        "url": "https://github.com/SimulatedGREG/electron-vue"
      },
      {
        "framework": "Vue (Vue-CLI 3)",
        "title": "Vue-CLI Plugin Electron Builder",
        "url": "https://github.com/nklayman/vue-cli-plugin-electron-builder"
      }
    ],
    "tools": [],
    "tutorials": [
      {
        "title": "Building a Desktop App with Vue: Electron",
        "author": "Natalia Tepluhina",
        "url": "https://dev.to/vuevixens/building-a-desktop-app-with-vue-electron-3pl",
        "site": "dev.to"
      },
      {
        "title": "Login UI with Vuetify",
        "author": "Paris Nakita Kejser",
        "url": "https://www.youtube.com/watch?v=bC1o7R-E-bI",
        "site": "YouTube"
      },
      {
        "title": "Automatic Cross-Platform Deployments with Electron and Travis-CI",
        "author": "Lane Wagner",
        "url": "https://qvault.io/2019/08/08/automatic-cross-platform-deployments-with-electron-on-a-ci-server-travis/",
        "site": "QVault"
      }
    ],
    "notableProjects": [
      {
        "title": "Discord",
        "url": "https://discord.gg",
        "description": "Chat application aimed primarily at gamers"
      },
      {
        "title": "VSCode",
        "url": "https://code.visualstudio.com",
        "description": "Open source text editor from Microsoft aimed at web developers. Though notably, Microsoft has heavily customized/modified Electron in an attempt to improve performance. VSCode is now 5 times faster than Atom (made using an unmodified version of Electron), however, still twice as slow as SublimeText (built natively)."
      },
      {
        "title": "Slack",
        "url": "https://slack.com",
        "description": "Slack is a chat application primarily aimed at inter-office and work-team communication."
      },
      {
        "title": "List of apps submitted to the Electron Website",
        "url": "https://electronjs.org/apps",
        "description": "User submitted apps made with Electron"
      }
    ],
    "notableTrailingLink": false
  },

  // Tauri
  {
    "title": "Tauri",
    "url": "https://tauri.app",
    "logo": "tauri.svg",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Rust"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Once you have all the prerequisites installed, the initial project creation is extremely polished. A single command starts up a new project, which integrates with all popular WebDev CLI's (Vite, Vue-CLI, CRA, etc)",
      "Has a build tool built right in. It's slow, but a phenomenal feature to have officially maintained",
      "The documentation is probably the best I've seen for any project listed on XPDA.net. Though I found a few of my questions unanswered as I used it, especially basic things like what OS's are supported. Because you can build your own binary, the limits on OS are really about what 3rd party build tools are compatible with your OS and Tauri's tools, and those 3rd party tools may change and drop support over time, making documenting how to do machine set up much more difficult outside of just the very latest OS's",
      "Produced a self-contained, portable, Windows executable that was under 7MB",
      "Currently Tauri relies on Rust for it's backend to interact with the OS, but plans to extend out backend language support to many other lanugages, and this seems like a very achievable goal",
      "Supports Ubuntu 18+, OSX 10.15+, and Windows 10+ (though I was able to get a Windows 7 build to work, however, I doubt that will be possible for much longer as related tooling changes, Visual Studio already warns that it doesn't support 7 any longer and may not work correctly)",
      "The Rust community is legendary in how vocal and excited they are about Rust and projects built with it. I've been monitoring Tauri's progress for years as they worked their way up to alpha, beta, and v1, and at no point did the Rust community's excitement dimenish",
      "Intent to eventually support building for desktop platforms other than the one you are currently on, but due to reliance on 3rd party tooling for builds, I don't foresee this happening anytime soon, or maybe even ever, unless they mean using a VM, which, isn't really the same thing. But would be happy to be proven wrong"
    ],
    "cons": [
      "Takes around ~2 hours for initial machine and project setup (Visual Studio, OS Specific WebView, Rust, Node/npm, crate installs/compiling, etc). And this is NOT a \"click a button and walk away\" setup. This process requires pretty much constant attention for almost the entire time, if you look away, something will be waiting on you pretty soon",
      "Builds must be done on target OS and can take 30-60 minutes per OS. Compared to NW.js or Electron where you can build for all OS's with a single command, which may take 15-30 minutes, but all will be done at the end; versus Tauri which takes twice as long for just one to finish. Using CI for this will solve the problem in either case, but CI tools that charge by CPU usage will be more expensive for Tauri, and require much more complex environment setups",
      "Relies on the OS's built in webview, which means you need to build your UI in a cross-browser friendly manner, and use special tooling that those not deeply familiar with frontend development would be new to. Also you must use features based on the lowest common denomenator, meaning newer language or browser features will not be accessible",
      "On Linux, you must build using the oldest Linux version you want to support, and may need to do multiple builds if the Linux versions differ greatly enough",
      "Similarly, on Windows, I did a build on Win 10 which would not run on Win 7. But a Win 7 build ran on both 7 and 10, and was actually slightly smaller in file size, which is curious",
      "Though the initial project setup seemed really polished at first (integrating all the official frontend CLI tools), this really isn't a replacement for the better boilerplates that exist in other tools, and in fact may even deter people from making those. For example, none of the frontend code produced has any examples of hooking into the features of Tauri, showing how to detect if your frontend is being ran in a desktop app or in a normal browser, etc. These are really useful features to have built in to a starter boilerplate, but are missing. The Tauri community could make them, but currently I could find no examples of this anywhere",
      "In the past I've given 2-hour workshops on \"Building your first Desktop App\", and I could get a group of 20-30 students, very beginner level (HTML, CSS, maybe some JS knowledge) to have built and packaged a functioning desktop app by hand, on their own personal laptops, using whatever OS they have. And every single student did so by the end of the 2 hours. But with Tauri, by the end, we wouldn't even be finished installing all the prerequisites. \"Congratulations students, we've accomplished nothing except clicking next and watching progress bars go by, thanks for coming out\". This feels like a massive UX failure",
      "Tauri does a lot of things really well, and those things are what I wish NW.js would improve. But other than the smaller filesize, these are all features the NW.js community could (or already do) provide as libraries. The things Tauri doesn't do well are the things NW.js really excels at, and are likely to never be fixed, as they are core to how the technology is designed, and it's goals. I wish I could just combine the best parts of each"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "\"Awesome-Tauri\" app list",
        "url": "https://github.com/tauri-apps/awesome-tauri#apps",
        "description": "Bulleted list of apps made with Tauri, in seemingly no particular order or with any screenshots"
      }
    ],
    "notableTrailingLink": true
  },

  // Xamarin
  {
    "title": "Xamarin",
    "url": "https://visualstudio.microsoft.com/xamarin",
    "logo": "xamarin.png",
    "deprecated": false,
    "languages": [
      "C#",
      ".NET",
      "F#"
    ],
    "platforms": [
      "iOS",
      "Android",
      "Windows Phone",
      "Windows",
      "OSX"
    ],
    "pros": [
      "Currently supports OSX 10.7+ (though the upcoming versions will only support 10.9+)",
      "Code can be shared across Desktop and Mobile apps",
      "OSX apps can use XCode's interface builder, or create UI's with C#",
      "Apps are written in C#/F#/.NET and can consume libraries written in VB and razor templates"
    ],
    "cons": [
      "Very little abstraction is handled for you between the different OS's, versus something like NW.js where you write code to its API and it converts it for each OS",
      "No Linux support",
      "Windows support is limited to UWP (Microsoft Store) format, meaning it can only support Windows 8+",
      "Developing for OSX apps requires a lot of knowledge of developing traditional native OSX desktop apps that talk directly to the OS API",
      "You are mostly limited to using Visual Studio for development"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": true
  },
  // Wails
  {
    "title": "Wails",
    "url": "https://wails.app",
    "logo": "wails.png",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Go"
    ],
    "platforms": [
      "Linux",
      "OSX",
      "Windows"
    ],
    "pros": [
      "Does not ship a browser, uses what is installed",
      "Builds to a single binary, packaging all frontend/backend code together (if all environment requirements are met)",
      "Has decent Linux OS support, though requires extra effort for each to be set up",
      "Has a decent CLI to generate projects that also has templates for many JS frameworks built in (Vue, Angular, Svelte, VanillaJS, Vuetify, React)",
      "Version 1 released in 2020. Still getting regular releases",
      "Browser access to the \"backend\" is easily available through window.backend.yourGoFunction(input).then((output) => {})"
    ],
    "cons": [
      "Windows version relies on Internet Explorer 11's engine. IE11 was released in 2013 and many modern JS frameworks (like Vue 3) have dropped support for IE11 in order to use newer browser APIs like proxies for performance improvements and better developer ergonomics.",
      "Saving changes on the frontend are not dynamically shown in the running app. You must kill the app and rebuild it to see changes. Each build takes several seconds, performing npm install and webpack builds",
      "Does not support making frameless apps, but does support fullscreen",
      "Does not support making tray apps",
      "The weakest part of the documentation is the JavaScript portions. Most JS documentation is written assuming you'll be using Vue 2",
      "Seems to have general issues with npm/npx and some command prompts/terminals",
      "Requires installing Go, npm/Node, and various OS specific GCC compilers, and Docker to support different Linux flavors. Each Linux version requires special setup"
    ],
    "frameworks": [
      {
        "framework": "Vue, Angular, React, Svelte",
        "title": "Built into Wails-CLI",
        "url": "https://wails.app/reference/cli/"
      }
    ],
    "tools": [],
    "tutorials": [
      {
        "title": "Building Desktop App in Go using Wails",
        "author": "Alex Pliutau",
        "url": "https://www.youtube.com/watch?v=Dg9rUXxNV-c",
        "site": "YouTube"
      }
    ],
    "notableProjects": [
      {
        "title": "Wails Official showcase",
        "url": "https://wails.app/showcase",
        "description": "Curated list of apps made with Wails"
      }
    ],
    "notableTrailingLink": true
  },

  // Adobe Animate CC
  {
    "title": "Adobe Animate CC",
    "url": "https://www.adobe.com/products/animate.html",
    "logo": "animate.svg",
    "deprecated": false,
    "languages": [
      "ActionScript"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Android",
      "iOS"
    ],
    "pros": [
      "Adobe Animate (formerly Adobe Flash Professional) allows you to produce Flash files (.swf), HTML5 compatible projects, and also export out to a self contained executable for Windows and OSX (so nothing additional needs to be installed to run it)",
      "Versatile and powerful vector-based animation tools",
      "Distribution sizes are small, typically around 6-20MB",
      "Aimed primarily at animated short films, and 2D games",
      "Can also export app for installation as a desktop app or mobile app ran inside Adobe Air"
    ],
    "cons": [
      "Requires renting the software month-to-month. If you stop paying for a Creative Cloud subscription, you will no long be able to edit/modify your application. Alternatively you could buy Adobe Flash Pro CS6 (older version) to actually own instead of rent the software, however you would not get any updates or newer features",
      "Lacks true Linux support. There is a separate download for a standalone Linux projector file that a SWF can be loaded in, but no way to build your app into it in the same way the Windows/OSX version can",
      "Very limited library/framework/tooling support",
      "Very limited access to file system, hardware, storage, or OS features"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [
      {
        "title": "Publishing your Flash project to a projector",
        "author": "Brian Kelly",
        "site": "YouTube",
        "url": "https://www.youtube.com/watch?v=bm-28NOmsyc"
      },
      {
        "title": "Publishing mobile and desktop applications",
        "author": "Lynda.com",
        "site": "YouTube",
        "url": "https://www.youtube.com/watch?v=-O1OcQltXyM"
      }
    ],
    "notableProjects": [
      {
        "title": "Knights of the Stream",
        "url": "https://www.knightsofthestream.com",
        "description": "A desktop app for Twitch streams that allows viewers to level up a character by participating in chat, and for the streamers to reward participants with in-game rewards."
      }
    ],
    "notableTrailingLink": true
  },

  // LibUI-Node
  {
    "title": "LibUI-Node",
    "url": "https://github.com/parro-it/libui-node",
    "deprecated": false,
    "languages": [
      "JS",
      "Node.js"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Uses minimal amounts of resources, much less than NW.js and Electron",
      "Built package can be as small as ~20MB (compared to ~70MB (NW) and ~120MB (Electron))",
      "Distribution sizes can be as low as 10MB (packaged installer)",
      "Can use node_modules",
      "Has Vue, React, Etc. boilerplates available",
      "Plays nicely with Gulp, Webpack, etc.",
      "Ability to share code across Mobile/Web/Desktop if project setup correctly",
      "Supports Windows Vista SP1+ and OSX 10.8+"
    ],
    "cons": [
      "Requires native build tools and to do builds on each target platform",
      "Limited-to-no styling options, all apps look like vanilla form fields",
      "Very new, not out of beta",
      "Not great OS support, or build tools yet",
      "Builds tools aren't very robust yet",
      "Dev tooling is pretty non-existent",
      "Lots of unknowns"
    ],
    "frameworks": [
      {
        "framework": "React",
        "title": "Proton-Native",
        "url": "https://proton-native.js.org"
      },
      {
        "framework": "Vue.js",
        "title": "Vuido",
        "url": "https://vuido.mimec.org"
      }
    ],
    "tools": [],
    "tutorials": [
      {
        "title": "Building a Desktop App with Vue: Vuido",
        "author": "Natalia Tepluhina",
        "url": "https://dev.to/vuevixens/building-a-desktop-app-with-vue-vuido-490n",
        "site": "dev.to"
      }
    ],
    "notableProjects": [],
    "notableTrailingLink": true
  },
  // LibUI
  {
    "title": "LibUI",
    "url": "https://github.com/andlabs/libui#language-bindings",
    "deprecated": false,
    "languages": [
      "C",
      "C++",
      "C#",
      ".NET",
      "Lisp",
      "D",
      "Haskell",
      "Node.js",
      "Kotlin",
      "Lua",
      "Perl",
      "PHP",
      "Python",
      "Ruby",
      "Rust",
      "Scala",
      "Swift"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Uses the native OS UI, allowing for fairly small applications",
      "Wide support of bindings for other languages",
      "Uses very few resources"
    ],
    "cons": [
      "Quality and level of completion of bindings varies quite a bit",
      "You are limited to very basic form-like UI's",
      "Most bindings require native build tools and doing builds on each target OS",
      "Dev, build, and distribution tools are weak or completely lacking",
      "Documentation is mostly limited to README files"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": true
  },

  // Sciter
  {
    "title": "Sciter",
    "url": "https://sciter.com",
    "logo": "sciter.png",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "TIScript"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Supports Windows XP+ and OSX 10.7+",
      "Distribution can be as small as 4MB for an installer (very impressive for what you get)",
      "Uses very little resources to give similar UI experience as that of a browser",
      "Source code is customizable for those wanting to tweak the build (at a cost)",
      "Has a tool called \"Quark\" which is a simple UI for managing and building your Sciter projects (I really like this, and would like to see it improved)",
      "In the years between when I first reviewed Sciter and now, they have made many major improvements"
    ],
    "cons": [
      "Has a limited free version, can become expensive in some scenarios",
      "Does not support all CSS features (No CSS Grid support, for example)",
      "Uses a proprietary scripting language that is based off of JavaScript (ES6), with a subset of features and missing many aspects of the Browser API. This gives you most of what you'd want, but for example, running vue.min.js will throw errors from Vue attempting to use JS features that are missing",
      "Documentation is very lacking",
      "While attempting to use \"Quark\", I got a cryptic error message, which after Googling required me to globally install a 3rd party tool, then restart Quark for builds to work",
      "Does not use Chrome or Firefox Dev tools. The inspector it comes with is EXTREMELY limited, giving you the very bare minimum",
      "The system access API (fs, network, etc) is \"inspired\" by Node, but definitely not Node. From my experience it's a bit flaky, and WAY under-documented"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      { "title": "Norton Internet Security" },
      { "title": "eSet Smart Security" },
      { "title": "Avast Free Antivirus" },
      { "title": "Bitdefender" },
      { "title": "Comodo Internet Security" }
    ],
    "notableTrailingLink": false
  },
  // Xojo
  {
    "title": "Xojo",
    "url": "https://www.xojo.com",
    "logo": "xojo.png",
    "deprecated": false,
    "languages": [
      "Xojo"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux",
      "iOS"
    ],
    "pros": [
      "Very beginner friendly, uses a simple WYSIWYG editor",
      "Streamlined wizard approach to creating new projects",
      "Good Linux support",
      "Offers cloud platform for easy deployments of web projects"
    ],
    "cons": [
      "Uses the proprietary \"Xojo language\", an object oriented language similar to VB, Java, or C#",
      "Exporting to each platform is simple and easy, but your options are fairly limited around executable details and packaging for distribution",
      "Their documentation site is very easy to get lost in, typically defaulting to indexes of single-word links to other pages",
      "Costs $300/year for cross-platform desktop license, cost goes up from there"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [
      {
        "title": "Creating a Desktop application using Xojo",
        "author": "Xojo",
        "url": "https://www.youtube.com/watch?v=rBgURfg11qo",
        "site": "YouTube"
      }
    ],
    "notableProjects": [
      {
        "title": "Products made with Xojo",
        "url": "https://www.xojo.com/resources/examples.php",
        "description": "Curated list of products made with Xojo"
      }
    ],
    "notableTrailingLink": true
  },

  // Chromely
  {
    "title": "Chromely",
    "url": "https://github.com/chromelyapps/Chromely",
    "logo": "chromely.png",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      ".NET",
      "C#"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Simplifies interacting with Chromium Embedded Framework (CEF) for .NET (5) and .NET Core developers",
      "Based on CefSharp and CefGlue",
      "Has Vue, React, Angular, and Blazor boilerplates",
      "Uses Chromium dev tools",
      "Use of Node/npm in your project is entirely optional and limited to development"
    ],
    "cons": [
      "The abstraction from the OS layer is minimal compared to NW.js or Electron, some of this is to be resolved in future versions",
      "Requires referencing documentation of 3rd parties (Xilium.CefGlue, CefSharp) to build more advanced apps",
      "Basically one person behind most of the code"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [
      {
        "title": "Chromely - Lightweight Alternative to Electron for .NET/.NET Core HTML5 Desktop Apps",
        "url": "https://medium.com/@softoille/chromely-leaner-alternative-to-electron-net-electron-for-net-net-core-dev-6726f963c299",
        "site": "Medium"
      }
    ],
    "notableProjects": [
      {
        "title": "A List of Apps Built with Chromely",
        "url": "https://github.com/chromelyapps/Chromely/issues/63"
      }
    ],
    "notableTrailingLink": true
  },
  // Chromium Embedded Framework (CEF)
  {
    "title": "Chromium Embedded Framework (CEF)",
    "url": "https://bitbucket.org/chromiumembedded/cef",
    "logo": "cef.png",
    "deprecated": false,
    "languages": [
      "C",
      "C++",
      "Java"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "High amount of control",
      "Good if you need to add in a browser view to an existing application",
      "Relied on by a ton of projects/tools, making it likely to be around a long time",
      "Has been ported to different languages for those that prefer .NET, Go, Delphi, or Python"
    ],
    "cons": [
      "Considerably more complex than other options on this list",
      "This is as bare-bones as it gets, many other projects listed on this site are built on top of CEF to simplify it and make development faster/easier"
    ],
    "frameworks": [],
    "tools": [
      {
        "type": "Port",
        "title": ".NET CEF#",
        "url": "https://github.com/cefsharp/CefSharp"
      },
      {
        "type": "Port",
        "title": ".NET/Mono CEF Glue",
        "url": "https://bitbucket.org/xilium/xilium.cefglue"
      },
      {
        "type": "Port",
        "title": ".NET CEF ChromiumFX",
        "url": "https://bitbucket.org/chromiumfx/chromiumfx"
      },
      {
        "type": "Port",
        "title": "Delphi CEF",
        "url": "https://github.com/hgourvest/dcef3"
      },
      {
        "type": "Port",
        "title": "CEF4Delphi",
        "url": "https://github.com/salvadordf/CEF4Delphi"
      },
      {
        "type": "Port",
        "title": "Go CEF",
        "url": "https://github.com/CzarekTomczak/cef2go"
      },
      {
        "type": "Port",
        "title": "Official Java CEF port",
        "url": "https://bitbucket.org/chromiumembedded/java-cef"
      },
      {
        "type": "Port",
        "title": "JavaCEF",
        "url": "http://code.google.com/p/javacef"
      },
      {
        "type": "Port",
        "title": "Python CEF",
        "url": "http://code.google.com/p/cefpython"
      }
    ],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "Spotify",
        "url": "https://www.spotify.com",
        "description": "Spotify is a streaming music platform. It's built with C++, JS, Handlebars, and Less and uses CEF under the hood."
      }
    ],
    "notableTrailingLink": true
  },

  // Kivy
  {
    "title": "Kivy",
    "url": "https://kivy.org",
    "logo": "kivy.png",
    "deprecated": false,
    "languages": [
      "Python"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux",
      "iOS",
      "Android"
    ],
    "pros": [
      "Uses a simplified custom UI markup language called \"Kv language\" to handle the layout across all platforms",
      "Detailed and complete documentation, including guide, tutorials, and API"
    ],
    "cons": [
      "Separate build processes for each target platform",
      "The size of the API will be overwhelming to those starting out with Kivy"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "Kivy Projects Gallery",
        "url": "https://kivy.org/#gallery",
        "description": ""
      }
    ],
    "notableTrailingLink": true
  },
  // PyQt
  {
    "title": "PyQt",
    "url": "https://www.riverbankcomputing.com/software/pyqt",
    "logo": "qt.png",
    "deprecated": false,
    "languages": [
      "Python"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX",
      "iOS",
      "Android"
    ],
    "pros": [
      "Qt is built with C++ which can be cumbersome, the Python bindings simplify interacting with it"
    ],
    "cons": [
      "If your project is not licensed under GPLV3 then you will need to purchase a commercial license for PyQt which costs $550 per developer"
    ],
    "frameworks": [],
    "tools": [
      {
        "type": "Build System",
        "title": "fman",
        "url": "https://build-system.fman.io"
      }
    ],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "OpenShot",
        "url": "http://www.openshot.org",
        "description": "Open source video editing software."
      },
      {
        "title": "Manuskript",
        "url": "http://www.theologeek.ch/manuskript",
        "description": "Open source tool for writers to create their first draft"
      }
    ],
    "notableTrailingLink": true
  },

  // Qt
  {
    "title": "Qt",
    "url": "https://www.qt.io",
    "logo": "qt.png",
    "deprecated": false,
    "languages": [
      "C++"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux",
      "iOS",
      "Android",
      "Windows Phone"
    ],
    "pros": [
      "Also supports other platforms: Embedded Linux, Integrity, QNX, VxWorks, Wayland, Windows Embedded (CE), Windows UWP (WinRT), and X11. Has been ported to additional platforms: Open Solaris, Haiku, OS/2, webOS, Kindle DX, AmigaOS, Tizen, and Sailfish OS"
    ],
    "cons": [
      "Though it has an extremely wide support for platforms, it lacks support for legacy OS's, starting support from OSX 10.12+, Win 7+, and Ubuntu 16/18.",
      "If your project is not licensed under GPLV2, GPLV3, or LGPL3 then Qt costs $459/developer/month",
      "Many features in the commercial version are not available in the free version for open source projects"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "Adobe Photoshop Elements",
        "url": "",
        "description": "Lower cost version of the professional Photoshop software for consumers."
      },
      {
        "title": "Auodesk Maya",
        "url": "",
        "description": "Industry standard 3D modeling/rendering software"
      },
      {
        "title": "Dolphin",
        "url": "https://dolphin-emu.org",
        "description": "Emulator for the Nintendo Wii and Nintendo GameCube systems."
      },
      {
        "title": "Google Earth",
        "url": "",
        "description": "Projects a 3D representation of Earth using satellite and GIS data."
      },
      {
        "title": "Krita",
        "url": "",
        "description": "Open source graphics editing and digital painting software."
      },
      {
        "title": "VirtualBox",
        "url": "",
        "description": "Open source virtualization software for virtual machines"
      },
      {
        "title": "VLC Media Player",
        "url": "",
        "description": ""
      },
      {
        "title": "List of additional applications using Qt on Wikipedia",
        "url": "https://en.wikipedia.org/wiki/Qt_(software)#Applications_using_Qt",
        "description": ""
      }
    ],
    "notableTrailingLink": false
  },
  // wxWidgets
  {
    "title": "wxWidgets",
    "url": "https://wxwidgets.org",
    "logo": "wxwidgets.png",
    "deprecated": false,
    "languages": [
      "C++",
      "Python",
      "Perl",
      "Ruby"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux"
    ],
    "pros": [
      "Uses the native UI elements of the OS",
      "Has been ported to Python, Perl, and Ruby"
    ],
    "cons": [
      "From what I can see, wxWidgets hasn't kept up-to-date with modern (2010 and on) OS's. There are mentions of older (pre-iphone) smart phones, Windows 95-Vista, and OSX 10.5. Though modern OS's offer good backwards compatibility and can still open applications designed for older OS's (YMMV)",
      "Requires a deeper knowledge of the target platform than other tools on this list"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "Audacity",
        "url": "http://audacity.sourceforge.net",
        "description": "Open source audio editing tool."
      },
      {
        "title": "KiCad",
        "url": "http://iut-tice.ujf-grenoble.fr/kicad/index.html",
        "description": "Electronic schematic diagrams and printed circuit board design application."
      },
      {
        "title": "wxWidgets' list of notable projects",
        "url": "https://wxwidgets.org/about/screenshots/",
        "description": "List with screenshots curated by wxWidgets"
      }
    ],
    "notableTrailingLink": false
  },

  // Carlo
  {
    "title": "Carlo",
    "url": "https://github.com/GoogleChromeLabs/carlo",
    "deprecated": true,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Node.js"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Made by Google",
      "Uses the user's installed copy of Chrome so you don't need to package and ship the browser in your distribution making dist sizes very small",
      "Uses the Puppeteer API for communicating between Node and browser"
    ],
    "cons": [
      "Is no longer maintained, as of Feb 2020",
      "Though made by Google, it is part of their Chrome Lab experiments, which often become abandoned. (called it)",
      "Requires the end user has Chrome 70+ installed on their system (released 2018-10-16)",
      "You do not control the browser version, meaning usage of some new browser features in your app will require fallbacks to what Chrome 70 supported",
      "The packaging for general distribution pipeline does not exist. You are told to use pkg and to manually handle customizing your app icon, etc.",
      "No established paths for setting up auto updates"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": true
  },
  // Lorca
  {
    "title": "Lorca",
    "url": "https://github.com/zserge/lorca",
    "logo": "lorca.png",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Go"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Inspired by Carlo, but for Go instead of Node.js",
      "Unlike Carlo, Lorca can build an executable for most any platform via the go build command",
      "Uses the user's installed copy of Chrome so you don't need to package and ship the browser in your distribution making dist sizes very small",
      "Distribution sizes of 5-10MB"
    ],
    "cons": [
      "Very new project, basically one person behind it",
      "Requires the end user has Chrome 70+ installed on their system (released 2018-10-16)",
      "You do not control the browser version, meaning usage of some new browser features in your app will require fallbacks to what Chrome 70 supported",
      "Though building a native executable is available, you will still need to manually edit it to embed app icon, etc. and use tools for creating installers",
      "No established paths for setting up auto updates"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": true
  },

  // Ultralight
  {
    "title": "Ultralight",
    "url": "https://ultralig.ht",
    "logo": "ultralight.png",
    "deprecated": false,
    "languages": [
      "C++",
      "HTML",
      "CSS"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux"
    ],
    "pros": [
      "Distribution sizes are as low as ~8MB",
      "Low memory usage",
      "GPU-Accelerated, drivers for Direct3D, Metal, and OpenGL (optimized for games)",
      "Ultralight is designed for C++ developers, however it plans to add bindings for C, C#, .NET, Node.js, and Python",
      "Free for non-commercial use, educational use, and commercial use by indie devs making less than US$100,000 a year"
    ],
    "cons": [
      "Currently in beta and missing many features",
      "Not free for all commercial use",
      "Mostly closed source",
      "Basically one person behind most of the code",
      "Currently requires the end user have a GPU",
      "Lacking full support for CSS3, especially around SVG, filters, and dropshadows",
      "Limited JavaScript interaction through C++",
      "Internal WebKit is based off of Safari with many features disabled, notably WebWorkers, WebAudio and Video"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": true
  },
  // NeutralinoJs
  {
    "title": "NeutralinoJs",
    "url": "https://neutralino.js.org",
    "logo": "neutralinojs.png",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Neutralino is a small executable that runs a static local http server to serve your application in the user's browser",
      "Though it lacks in powerful features, its goal is to be small, lightweight, and easy to pick up, and it delivers on those goals very well",
      "Has Vue, React, and Angular boilerplates"
    ],
    "cons": [
      "Lacks many OS level features like being able to make a tray icon, or custom window chrome",
      "Very limited access to file system, hardware, and OS level features through a tiny API ",
      "Your UI could run any browser the end user has, meaning that your app must be designed in a cross-browser friendly manner",
      "Documentation is pretty light",
      "Documentation does some pretty misleading cherry picking of comparing itself against NW.js and Electron",
      "Could just be me, but I downloaded the latest stable build on Windows 10 and opened it without changing anything and it crashed in the first 10 seconds"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": true
  },

  // LambdaNative
  {
    "title": "LambdaNative",
    "url": "http://www.lambdanative.org",
    "logo": "lambdanative.png",
    "deprecated": false,
    "languages": [
      "Scheme"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX",
      "Android",
      "iOS"
    ],
    "pros": [
      "Also supports these platforms: OpenBSD, NetBSD, Free BSD, OpenWrt, and BlackBerry 10",
      "Uses the Gambit-C version of Scheme"
    ],
    "cons": [
      "Documentation is limited to a 900 page GitHub Wiki",
      "The documentation itself lists the learning curve for Scheme as a negative"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "Slideshow of apps made with LambdaNative",
        "url": "http://www.lambdanative.org/#apps",
        "description": ""
      }
    ],
    "notableTrailingLink": true
  },
  // Revery
  {
    "title": "Revery",
    "url": "https://www.outrunlabs.com/revery",
    "logo": "revery.png",
    "deprecated": false,
    "languages": [
      "ReasonML",
      "OCaml"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux"
    ],
    "pros": [
      "Designed with Functional Programming (FP) in mind for those that prefer it",
      "A \"React-Like\" coding experience for building native UI's without a browser",
      "Actively being developed, and has a Discord group to ask for guidance",
      "There is intent to potentially support mobile platforms in the future"
    ],
    "cons": [
      "The project is described as \"an experiment\", and it feels like more of a proof-of-concept than a valid alternative for serious XPDA development.",
      "Their documentation is very weak and assumes a familiarity with the Reason/OCaml ecosystems",
      "No examples of hooking into the file system, hardware, or OS level",
      "No examples of window management, frameless windows, taskbar apps, etc.",
      "No instructions or tooling around automated builds",
      "Basically one person behind most of the code"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [
      {
        "title": "Official Revery Quick-Start",
        "author": "Outrun Labs",
        "url": "https://github.com/revery-ui/revery-quick-start",
        "site": "GitHub"
      }
    ],
    "notableProjects": [
      {
        "title": "Onivim",
        "url": "https://onivim.io",
        "description": "A \"futuristic\" text editor focused around Vim. Vim was a technology used in the 1980's, kinda like VCR's, remember those?"
      }
    ],
    "notableTrailingLink": true
  },

  // Brackets-Shell
  {
    "title": "Brackets-Shell",
    "url": "https://github.com/adobe/brackets-shell",
    "logo": "brackets.svg",
    "deprecated": false,
    "languages": [
      "HTML",
      "CSS",
      "JS"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Maintained by Adobe"
    ],
    "cons": [
      "No documentation",
      "Only designed for Brackets text editor, not for general purpose use",
      "They recommend using NW.js or Electron instead"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "Brackets",
        "url": "https://brackets.io",
        "description": "Brackets is a user friendly, open-source, text editor from Adobe aimed at Web designers."
      }
    ],
    "notableTrailingLink": true
  },
  // 8th
  {
    "title": "8th",
    "url": "https://8th-dev.com",
    "logo": "8th.png",
    "deprecated": false,
    "languages": [
      "8th"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux",
      "iOS",
      "Android"
    ],
    "pros": [
      "Runs on all platforms without the use of a browser or vm",
      "May be appealing to more old-school devs that like Perl or Fourth"
    ],
    "cons": [
      "Uses proprietary \"8th\" language (based on \"fourth\") that they describe as \"If you‚Äôre coming from a ‚Äúmainstream‚Äù language, you may find 8th a bit puzzling.\"",
      "I'm putting two more bullet points here for the language to emphasize how bad it is. It looks closer to regex than it does a modern programming language. The following is one of the first examples they give for you to learn the language (from page 27 of the 300 page manual)",
      "\nlocals:\n: foobar\n  1000 \"baz\" w:! ;\n\n: bar 120 \"baz\" w:! foobar ;\n\nlocals:\n: foo 100 \"baz\" w:! ...\n\nbar...\n\"baz\" w:@ ;",
      "The tool ranges from free to \"enterprise\" ($3000) with additional features and support added to higher tiers. Source code for 8th is only available to Enterprise customers willing to sign an NDA",
      "Due to the tool being named \"8th\" it is basically impossible to search for anything related to it on StackOverflow or Google",
      "In an attempt to find any usage/support for 8th outside of their fairly tiny forum, I came across a single post on Reddit where the community there... well, lets just say it wasn't well received",
      "From the examples I've seen, the UI's are all fairly simplistic and it doesn't seem very easy to customize the UI across different platforms. This may be ideal for some niche cases to keep the layout and look identical, but I imagine most projects would need greater control than this"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [
      {
        "title": "8th: One Effort, Multiple Platforms",
        "author": "",
        "url": "https://www.youtube.com/watch?v=yrI97yrtb5Y",
        "site": "YouTube"
      }
    ],
    "notableProjects": [],
    "notableTrailingLink": true
  },

  // //////////////////////////
  // DEPRECATED
  // //////////////////////////

  // Adobe AIR
  {
    "title": "Adobe AIR",
    "url": "http://www.adobe.com/products/air.html",
    "logo": "air.png",
    "deprecated": true,
    "languages": [
      "HTML",
      "JS",
      "ActionScript"
    ],
    "platforms": [
      "iOS",
      "Android",
      "Windows",
      "OSX"
    ],
    "pros": [
      "Simple development environment"
    ],
    "cons": [
      "Poor Linux support",
      "Requires end users to install Adobe Air runtime separately",
      "Limited documentation around desktop app development",
      "Adobe dropped all support AIR in 2020 and transferred rights to Samsung owned HARMAN",
      "Use for XPDA's is considered abandoned"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [
      {
        "title": "AIR Community Forums",
        "author": "Adobe",
        "url": "https://forums.adobe.com/community/air",
        "site": "forums.adobe.com"
      }
    ],
    "notableProjects": [
      {
        "title": "Pownce",
        "url": "https://en.wikipedia.org/wiki/Pownce",
        "description": "Now defunct instant messaging/file sharing app"
      }
    ],
    "notableTrailingLink": true
  },

  // Muon
  {
    "title": "Muon",
    "url": "https://github.com/brave/muon",
    "logo": "muon.png",
    "deprecated": true,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Node.js"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux"
    ],
    "pros": [
      "Fork of Electron with a less modified Chromium source, and goals to improve security and usage of Chrome extensions"
    ],
    "cons": [
      "Project was deprecated in 2018.",
      "This is literally just Electron with some very minor changes, all of which are things that NW.js already does much better than they are aiming for. I can't see any reason to recommend Muon to anyone. Either you need these technical improvements over Electron (and should use NW.js), or you need the large community size of Electron (and should use Electron then)",
      "Documentation is limited and mostly just a copy/paste job from Electron"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "Brave Browser",
        "url": "https://brave.com",
        "description": "Brave has since switched to patching the Chromium source code directly. Which makes sense becuase using Electron to make a browser, very possibly, is the laziest thing that could be done with the technology."
      }
    ],
    "notableTrailingLink": true
  },
  // Tint2
  {
    "title": "Tint2",
    "url": "https://github.com/trueinteractions/tint2",
    "logo": "tint2.png",
    "deprecated": true,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Node.js"
    ],
    "platforms": [
      "Windows",
      "OSX",
      "Linux"
    ],
    "pros": [
      "Similar approach to that of NW.js or Electron"
    ],
    "cons": [
      "Project is deprecated (last release was in 2016)"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": true
  },

  // AppJS
  {
    "title": "AppJS",
    "url": "http://appjs.com",
    "logo": "appjs.png",
    "deprecated": true,
    "languages": [
      "HTML",
      "CSS",
      "JS",
      "Node.js"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Built on top of Chromium and Node",
      "Distribution sizes around 20MB"
    ],
    "cons": [
      "Project is deprecated (last release was in 2014)",
      "No developer tools",
      "Uses very old versions of Chromium and Node"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [
      {
        "title": "tIRC",
        "url": "https://www.youtube.com/watch?v=Vc1hFIGAw28",
        "description": "Simple IRC Chat client for OSX"
      }
    ],
    "notableTrailingLink": true
  },
  // JSDB
  {
    "title": "JSDB",
    "url": "http://www.jsdb.org",
    "logo": "jsdb.png",
    "deprecated": true,
    "languages": [
      "JS",
      "XML"
    ],
    "platforms": [
      "Windows",
      "Linux",
      "OSX"
    ],
    "pros": [
      "Designed as a means to use JavaScript to interact with databases. For data-driven, network-centric programming.",
      "Can make exes and they compress to less than 1MB",
      "Though old, and no longer recieving updates, the author still answers questions in a Google Group",
      "Based on Mozilla SpiderMonkey",
      "Free/Open source"
    ],
    "cons": [
      "Dated, last release was 2012. Code updates are effectively deprecated",
      "Primarily focused on database related solutions, may be limited",
      "Uses class libraries from Raosoft, Inc. making the open-source version free, however additional functionality or less restrictive license must be purchased (starting at $50)",
      "Sort of like a poor-man's version of Node, but much smaller in size, for the trade off of using older JS, and having no access to modern JS frameworks or tooling"
    ],
    "frameworks": [],
    "tools": [],
    "tutorials": [],
    "notableProjects": [],
    "notableTrailingLink": false
  }
]
